* Core(DI, IoC)
    - 스프링의 근간, 내가 만든 클래스를 스프링이 직접 관리하여 어플리케이션을 동작하게 한다.

    - 스프링에 Service 라는 Dependencies 를 Controller 가 의존하는데
      private final DMakerService dMakerService; 라고만 적었을때에는 실행이 되지 않아야 하는데
      생성자만 만들어도 알아서 누군가 Service 를 주입해준다. 이것을 DI 라고 한다.
        - 어노테이션을 사용시 생성자를 직접 만들지 않아도된다. @RequiredArgsConstructor

        public DMakerController(DMakerService dMakerService){
        this.dMakerService = dMakerService;
        }

    - 누군가가 만든 Service 를 넣어주는것을 DI 가 한다.
    - 생성자를 실행시키는것 Inversion of control 이 한다.


* AOP
    - 공통적인 코드를 프레임워크 레벨에서 지원해주는 방법

      예)
        @Transactional : 메소드 실행 전과 후로 begin(), save(), rollback() 등을 알아서 해준다.


* Data binding, Validation
    - 검증 그리고 외부에서 받은 데이터를 담아내는 방법

* Resource
    - 스프링 내부에서 설정이 들어있는 파일들에 접근하는 동작 원리

      예)
        ResourceLoader:
            application.yml 에 들어있는 설정값들을 ApplicationContexts 에 넘겨줘어 애플리케이션이
            설정에 맞춰 동작할 수 있게 해준다.

* SpEL
    - 짧은 표현식을 통해 필요한 데이터나 설정 값을 얻어올 수 있게 하는 특별한 형태의 표현식에 가까운 간편한 언어

      예)
        yml 에 설정값을 넣어준다 (특정 주소라던지 노출되어서는 안되는 값 이미지 메인경로 등....)
        developer:
            level:
                min:
                   senior: 12

        @Value("${developer.level.min.senior");
        private final Integer minSeniorYears;
        minSeniorYears = 12;

* Null-Safety
    - Null 을 조금더 잘 다루는 방법

      예)
        @NonNull, @NotNull 등....


