과거에는 좋지 못한 예외처리 패턴들이 있었다.
그런 코드패턴들을 리펙토링하는 방법들을 알아보자.

1.Controller
과거에는 컨트롤러에서 Exception 을 처리하였고 이곳에서 예외적인 상황이 발생한다면
바로 로직을 멈추고 예외처리 응답을 만들어 주는 방식을 사용했었다.

2.Dto
Error 를 처리하기 위한 Dto 를 따로 만들어줬다. (DeveloperValidationDto)

*예외처리 방식을 이렇게 했다면 문제점들?
1. if 문에 들어가는것도 외부인 db에 접근하는것이기에 알 수 없는 예외 발생을 막기위해
try,catch 를 또 써줘야 한다.

2. 외부 api 를 호출하는 라이브러리를 사용할때에는 try,catch 방식을 사용한다고 한다.
예측할 수 없는 오류를 뱉거나 해당 응답값을 준다하고 값을 주지 않을때가 있기에 부분적으로 필요하다.

3.컨트롤러에서 예외처리를 했다면 이 예외처리한 것에 대한 결과값을 받아 처리해주는 로직이 또 들어가야한다.
DeveloperValidationDto developerValidationDto = dMakerService.validateCreateDeveloperRequest(request);
if(developerValidationDto != null){
   return CreateDeveloper.Response.Builder()
          .errorCode(developerValidationDto.getError())
          .errorMessage(developerValidation.getErrorMessage())
          .build();
}

4.Controller 는 프레젠테이션 레이어이다.(요청을 잘 받고 응답을 잘 주는 역할만 하는것, 징검다리 역할)
이렇게되면 비즈니스 로직이 짬뽕이되어 불필요한 코드들이 들어갈수가 있어, 왠만하면 컨트롤러단에서는 데이터 값을 잘 받아왔는지만
확인후에 service 단으로 넘긴다. 아니면 최소 트랜젝션이 2개로 나뉘어 구분해줘야 할 경우에만 컨트롤러 상에서 따로따로 나눠주는 최소의 컨트롤링
까지만 하는것이 컨트롤러의 역할.

public DeveloperValidationDto validateCreateDeveloperRequest(CreateDeveloper.Request request) {
        DeveloperValidationDto developerValidationDto = null;

        developerValidationDto = validateDeveloperLevel(
                request.getDeveloperLevel(),
                request.getExperienceYears());

        try {
                    if (developerRepository.findByMemberId(request.getMemberId()).isPresent()) {
                        developerValidationDto = new DeveloperValidationDto(
                                DUPLICATED_MEMBER_ID,
                                DUPLICATED_MEMBER_ID.getMessage()
                        );
                    }

                }catch(Exception e) {
                    log.error(e.getMessage(), e);
                    developerValidationDto = new DeveloperValidationDto(
                            INVALID_REQUEST,
                            INVALID_REQUEST.getMessage()
                    );
                }



        벨리데이션 처리후 return 값을 줘야함.
        return null;
    }


    private DeveloperValidationDto validateDeveloperLevel(DeveloperLevel developerLevel, Integer experienceYears) {
            if(developerLevel == DeveloperLevel.SENIOR
                    && experienceYears < 10){
                return new DeveloperValidationDto(LEVEL_EXPERIENCE_YEARS_NOT_MATCHED,
                        LEVEL_EXPERIENCE_YEARS_NOT_MATCHED.getMessage());
            }
        }