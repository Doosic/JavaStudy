스프링에서 트랜잭션의 ACID한 @Transactional이 어떻게 지원을 해주고 있을까?

@TransactionInterceptor
어노테이션을 붙이게되면 TransactionInterceptor가 동작을 하면서
해당 메서드 또는 클래스의 앞뒤에 특정 트렌잭션의 시작 및 롤백,커밋 로직을 넣어준다.

invoke => 누군가를 부른다 라는 뜻을 가지고있다.
1. 우리가 만든 메서드를 불러준다 MethodInvocation (AOP를 연결해주는 하나의 조인포인트 이다.)
Ctrl + 마우스 오른쪽을 눌러 모든 클래스, 인터페이스 들에 정보를 확인할 수 있다.

트랜잭션 구조의 흐름을 보니 중간에 다른 처리를 껴 넣을수도 있을듯 하다.
    @Override
	@Nullable
	public Object invoke(MethodInvocation invocation) throws Throwable {
		// Work out the target class: may be {@code null}.
		// The TransactionAttributeSource should be passed the target class
		// as well as the method, which may be from an interface.

		// targetClass = 우리가 만든 클래스의 정보를 가져온다.
		Class<?> targetClass = (invocation.getThis() != null ? AopUtils.getTargetClass(invocation.getThis()) : null);

		// Adapt to TransactionAspectSupport's invokeWithinTransaction...
		// invokeWithinTransaction 트랜잭션 안에서 우리에 메서드를 실행해주겠다.
		// invokeWithinTransaction 클래스를 타고 들어가면 Spring mvc에서의 트랜잭션 동작이 나오게 된다. ----줄 밑의 코드로 이동
		return invokeWithinTransaction(invocation.getMethod(), targetClass, new CoroutinesInvocationCallback() {
			@Override
			@Nullable
			public Object proceedWithInvocation() throws Throwable {
				return invocation.proceed();
			}
			@Override
			public Object getTarget() {
				return invocation.getThis();
			}
			@Override
			public Object[] getArguments() {
				return invocation.getArguments();
			}
		});
	}

	--------------------------------------------------------------------------
	if (txAttr == null || !(ptm instanceof CallbackPreferringPlatformTransactionManager)) {
    			// Standard transaction demarcation with getTransaction and commit/rollback calls.
    			// 필요하면 트랜잭션을 생성하여 인포메이션을 가져온다. 트랜잭션끼리의 계층구조가 있을수 있기에 필요하면 만든다고 한다.createTransactionIfNecessary가 있는데
    			TransactionInfo txInfo = createTransactionIfNecessary(ptm, txAttr, joinpointIdentification);

    			Object retVal;
    			try {
    				// This is an around advice: Invoke the next interceptor in the chain.
    				// This will normally result in a target object being invoked.
    				// 우리게 함수가 호출이되어 리턴값이 있거나 없어나 가 된다.
    				retVal = invocation.proceedWithInvocation();
    			}
    			// Exception의 최상위 Thowable이 발생하면 기본적으로는 롤백을 한다.
    			catch (Throwable ex) {
    				// target invocation exception
    				// completeTransactionAfterThrowing에 들어가보면 롤백에 대한 설정들이 있다.
    				// 롤백을 할 수도 있고 안할 수도 있고 조건문들이 들어있음.
    				completeTransactionAfterThrowing(txInfo, ex);
    				throw ex;
    			}
    			finally {
    				cleanupTransactionInfo(txInfo);
    			}