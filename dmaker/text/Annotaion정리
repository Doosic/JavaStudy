#@Getter
말그대로 Getter자동 생성
ex) test.getTestName();

#@Setter
말그대로 Setter자동 생성
ex) test.SetTestName("가나다라");

#@NoArgsConstructor
파라미터가 없는 생성자를 생성해준다.
(디폴트 생성자)
!주의점
1. 필드들이 final로 생성되어있는 경우에는 필드를 초기화 할 수 없음. 그렇기에 생성자를 만들지
못하고 에러발생
해결법 : #@NoArgsConstructor(force = true) 옵션을 이용하여 final필드를 0, false, null등
으로 초기화를 강제로 시켜 생성자 생성가능
2. @NotNull 같이 필드에 제약조건이 설정되어 있는 경우, 생성자내 null-check로직이 생성되지 않는다.

#@AllArgsConstructor
클래스에 존재하는 모든 필드에 대한 생서자를 자동으로 생성해준다.
필드에 @NotNull Annotation이 마크되어 있다면 생성자 내에서 null-check 로직을 자동적으로 생성

#@Builder
참조 : https://velog.io/@park2348190/Lombok-Builder%EC%9D%98-%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC#%EC%84%9C%EB%A1%A0
빌더 패턴을 사용가능하게 해준다.
setter을 사용하면 코드가 분산되어 지저분해질 확률이 있다.
package-private 생성자란? 해당 클래스 내에서만 사용하 수 있는 생성자 아래의 코드와 같다.
(디폴트 생성자를 뜻한다, 자바에서는 접근제어자 미기재시 디폴트생성자 package-private 생성자 로 생성된다)
BuildMe(String username, int age) {
        this.username = username;
        this.age = age;
    }

클래스에서 빌더 객체를 생성할 때는 builder() 메서드로 빌더 클래스의 인스턴스를 생성하고,
빌더 클래스에서는 build() 메서드로 실제 생성자를 호출하여 객체를 생성한다.
*builder() : 인스턴스 생성(아래코드 참조)
public BuildMe build() {
            return new BuildMe(this.username, this.age);
        }
*builder() : 실제 생성자를 호출하여 객체 생성(아래코드 참조)
public BuildMe build() {
            return new BuildMe(this.username, this.age);
        }


public static BuildMe.BuildMeBuilder builder() {
        return new BuildMe.BuildMeBuilder();
    }

    public static class BuildMeBuilder {
        private String username;
        private int age;

        BuildMeBuilder() {
        }

        public BuildMe.BuildMeBuilder username(String username) {
            this.username = username;
            return this;
        }

        public BuildMe.BuildMeBuilder age(int age) {
            this.age = age;
            return this;
        }

        public BuildMe build() {
            return new BuildMe(this.username, this.age);
        }

Developer developer = Developer.builder()
                    .developerLevel(request.getDeveloperLevel())
                    .developerSkillType(request.getDeveloperSkillType())
                    .experienceYears(request.getExperienceYears())
                    .memberId(request.getMemberId())
                    .name(request.getName())
                    .age(request.getAge())
                    .build();
            developerRepository.save(developer);