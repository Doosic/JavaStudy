H2DB란?

메모리 db로 주로 사용된다.
따로 오라클, Postgre처럼 따로 설치해야하는 것이 아니라 우리의 애플리케이션과 함께
8080를 사용하여 H2DB를 띄울수 있다.

단점으로는 메모리에 저장이 되기 때문에 애플리케이션 서비스가 시작될때에 같이 시작되었다가
서비스가 죽을때에 모든 데이터가 사라진다.
-----------------------------------------------------------------------------
설명 참조 : public class DmakerApplication
사용 방법

1.application.yml 파일에 다음과 같이 설정을 해준다. //raisingPokemon
spring:
  h2:
    console:
      enabled: true
2.이후 스프링 부트를 시작해주면 console에 다음과 같은 내용을 찾아준다.
H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:854d5f27-effe-4355-b0e3-420faa721b1f'
3. 주소 : http://localhost:8080/h2-console 로 접속하여준다
4. JDBC URL에 위의 주소를 입력한다. :  jdbc:h2:mem:854d5f27-effe-4355-b0e3-420faa721b1f
5. 커넥트 버튼을 누르면 메모리에 떠있는 DB에 접근이 된다.

----------------------------------------------------------------------------------
설명 참조 : public class Developer
자동으로 create시점과 update시점을 저장하는 기능을 Auditing이라 한다.
적용 방법은 Application.java에 @EnableJpaAuditing 어노테이션을 추가하고
Entity 클래스에 아래와 같이 적용하여 준다.
    @CreatedDate
    private LocalDateTime createAt;

    @LastModifiedDate
    private LocalDateTime updateAt;

@Repository 같은 어노테이션들 및 Spring의 기능들은 따로 공부를 해야한다.

-------------------------------------------------------------------------------------------
설명 참조 : public interface DeveloperRepository
// Spring Jap기능을 활용하여 간단하게 db에 저장할 수 있는 인터페이스를 구현
@Repository
public interface DeveloperRepository
        extends JpaRepository <Developer, Long>{
}

좌우폭을 짧게 가져가는게 가독성도 좀 더 좋고 화면을 둘로 나누기도 좋다.

-------------------------------------------------------------------------------------
설명 참조 : public class DMakerService
/*
        @RequiredArgsConstructor
        Service나 Controller는 위의 어노테이션을 사용하면 편리하다.
        자동으로 DeveloperRepository를 자동으로 Injection 해준다.

        과거에는 @Autowired, @Inject를 사용했어야 한다.
        @Autowired
        @Inject
        private DeveloperRepository developerRepository;
        이걸 사용시 서비스 코드가 어노테이션에 종속적으로 만들어져있어 서비스를 단독으로
        테스트를 하고싶어도 하기 어려워지는 문제가 있었다.

        그래서 개선방안으로 나온게 생성자를 통한 주입 방식이였다
        그런데 이런 방식에 문제도 서비스와 Reposiroty가 여러개일때에 고치기 힘들기에
        다음과 같은 방식이 나온것이다.
        public DMakerService(DeveloperRepository developerRepository){
        this.developerRepository = developerRepository;
    }
     */

    // final이 붙은애는 무조건 있어야 하기 때문에 final이 붙은 기본 생성자를 만들어준다.
    private final DeveloperRepository developerRepository;

----------------------------------------------------------------------------
설명 참조 : public class Developer
@Enumerated(EnumType.STRING) 의 개념 정리가 필요하다.
다른 클래스에 정의해둔 것을 참조하는 것 같음.


-----------------------------------------------------------------------------
설명 참조 : public class DMakerController
/*
        DMakerController(Bean)   DMakerService(Bean)   DeveloperRepository(Bean)
        =======================Spring Application Contexts=======================
        스프링이라는 컨텍스트 위에 Bean들을 구성하고 컨트롤러가 서비스를 가져다 쓰고싶다면
        private final을 통해 호출한다. 그리고 @RequiredArgsConstructor 를 붙여주면
        service를 Controller에 넣어준다고 생각하면 된다.
*/

     private final DMakerService dMakerService;

      @GetMapping("/create-developers")
         public List<String> createDevelopers(){
             log.info("Get /create-developers HTTP/1.1");
             // Get은 무언가를 받아올때에 사용하는것이 옳다.
             // 변경이 있을때에는 Post를 사용하는 것이 좋다.
             dMakerService.createDeveloper();

             // 단일 객체를 들고있을때에는 singletonList를 사용하는 것이 좋다.
             return Collections.singletonList("Olaf");
         }
위의 코드와 같이 Controller에서 Service를 호출하여 사용한다.

===============================================================================
정리
H2DB를 이용하여 간단하게 데이터 저장 또는 조작을 해볼 수 있고
이걸 사용하기 위해 Entity라는 특수한 타입에 클래스를 만들어주고 셋팅후
Repository 인터페이스를 만들어 Entity를 영속화 한후 서비스에서 호출하여 사용해준다.

그리고 요청이 있을시 Controller에서 service에 기능을 호출하여 서비스 단에있는 객체(만들어진 객체)를
Repository에서 save하여 영속화를 시키면 db에 저장이 되고 저장된 데이터를 console을 이용하여 손쉽게 확인이 가능하다.