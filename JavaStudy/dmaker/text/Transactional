트랜잭션

Transactional 어노테이션의 기능을 제공하는 라이브러리는 2가지가 있다.
        import javax.transaction.Transactional; -> readOnly 불허용
        import org.springframework.transaction.annotation.Transactional; readOnly 허용

시작하기에 앞서 백엔드 개발자에게는 꼭 알고가야할 개념이므로 책을 통해
깊게 학습해보는 것을 권유

@Transactional의 개념 (ACID)
Atomic(원자성) : 내가 누군가에게 만원을 보냈고 내 계좌에서 만원이 빠져나갔는데 에러가 난다면?
이 작업은 하나의 트랜젝션으로 묶여 돈을 보내고 돈을 받는 2개의 작업이 성공하지 못한다면 Rollback을 하여 원자성을 지켜준다.
둘다 성공하거나 둘다 실패하거나.

Consistency(일관성) : 모든 DB테이블에 자료들은 항상 정해진 규칙에 맞춰서 자료가 저장이 되어있어야 하고 하나의 트랜젝션이
끝나는 그 지점마다 일관성이 맞춰져 있어야 한다. 예를 들어 일반적인 계좌는 잔고는 만원밖에 없는데 다른사람의 계좌에 만원 이상의 돈이 갈순 없는것이기에
커밋이 끝나는 시점에 내 계좌는 0원이 될수 없다.

Isolation(고립성) : 성능과 트레이드 오프의 관계. DB를 고립상태에 놓인다면 서버에서 아무 요청을 받을수도 없고 고립성이 풀어진다면
성능은 좋아지지만 데이터의 정확성이 떨이질 수 있다.

Durability(지속성) : 커밋이 되는 시점에 db에 커밋된 이력을 남긴다. 모든 이력을 남기는 것이다.
db에서도 어떤 오류가 발생할 수 있기에 바로 디스크에 저장하는 것이 아니라 log에 남기고 디스크에 다시 옮겨주는 것이다.
혹시 디스크가 뻑난다면 log에서 전부 대기하고 있다가 디스크에 다시 순서대로 넣어준다.



