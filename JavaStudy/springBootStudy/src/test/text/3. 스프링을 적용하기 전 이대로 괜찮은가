* 스프링을 적용할 준비를 하기전에 현재 이대로 괜찮은지 생각하기

    - 서로다른 정렬 구현체 2개를 만들어 메인에서 사용중이다.
      (JavaSort, BubbleSort)

    - 요구사항중 만약 BubbleSort 를 사용하고 있었는데 JavaSort 를 바꾸라는
      클라이언트의 요청사항이 있다면 내부 코드를 변경해야 하는 문제가 생긴다.
      이때에 내부코드를 바꾸지 않고 구현체를 바꾸는 방법이 있는데 그것을 해보자.

    - 객체 지향 설계 (SOLID)
        - SPR: 한 클래스는 하나의 책임만 가져야 한다.
        - OCP: 소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다.
        - LSP: 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로
               바꿀 수 있어야 한다.
        - ISP: 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.
        - DIP: 프로그래머는 추상화에 의존해야지, 구체화에 의존하면 안된다.

        - Interface 를 이용해 강한 결합을 느슨하게 바꾸기
            Main 의 BubbleSort 를 보면 구현체를 바로 인스턴스화 해서 집어넣고있다.
            그런데 이렇게 한다면 구현코드를 바꾸기가 힘들고 테스트 할 때에도 구현코드를 바꿔서
            실행해보기가 어렵다.

            mainTest 에서 main 으로 인자값을 넘겨주어 실행했을 때에 정렬을 할것은 추측하나 어떻게
            정렬할지 바깥에서는 알 방법과 간섭할 방법이 없다.

            이렇게 된 상태가 main 이 bubbleSort 에 강한 결합이 되어있다고 말할 수 있다.
            main 은 정렬을 하기 위해서 어떻게 해야하는지를 구체적(BubbleSort, javaSort)으로 알고있다.
            이런 경우 Interface 로 대체한다면 정렬기능을 대체하는 어떤 로직을 써야하는것을 알지만 구체적으로는
            어떤 로직인지는 몰라도되는 상태, 결합을 느슨하게 할 수 있다.

            sort Interface 를 만들고 Interface 대로 구현된 메소드에는 @Override 를 붙여준다.
            꼭 붙여줄 필요는 없으나나 구현된 메소드 라는것을 명시해주는것이다.



           - Sort Interface 를 만들어 BubbleSort 와 JavaSort 를 구현했을때
             Interface 를 이용하여 첫번째로 바꾼 결과
                - JavaSort<String> sort = new JavaSort<>(); 에서 아래와 같이
                  Sort<String> sort = new JavaSort<>();
                  변수 선언부를 바꾸지 않고 구현체만 바꿔끼는게 가능해졌다.

                  그러나 아직도 충분하지 않다. 정렬 알고리즘이 무엇인지 알고있다.
                  Sort<String> sort = new JavaSort<>(); JavaSort 라는것을 사용하고 있단걸 알고있다.
                  제어역전을 이용하여 이것마저 모르게 하자.


           - 제어역전을 통해 결합도를 더 느슨하게 main 에서는 구현체마저도 모르게 하자.
                - Service 클래스를 만들고 생성자를 통해 어떤 Sort 구현체를 주입받을지 결정한다.

                    1. 바뀔일이 없기 때문에 final 로 선언
                    private final Sort<String> sort;

                    2. 생성자를 통해 Sort 인터페이스를 통해 만들어진 구현 클래스를 주입받는다.
                    public SortService(Sort<String> sort) {
                        this.sort = sort;
                        아웃로그를 통해 어느 클래스를 사용했는지 확인 가능
                        System.out.println("implementation: "+ sort.getClass().getName());
                    }

                    3. 구현 클래스를 생성자를 통해 주입받았고 this.sort = sort
                       3-1. sort 에는 구현된 클래스가 들어있으며(JavaSort, BubbleSort)
                       3-2. sort(JavaSort || BubbleSort, Sort 인터페이스로 구현된 클래스).sort 로 정렬
                    public List<String> doSort(List<String> list){
                        return sort.sort(list);
                    }

                - 아래의 코드는 Service 클래스를 통해 더욱더 느슨하게 결합한 형태이다.
                  private SortService sut = new SortService(new JavaSort<String>());
                  private SortService sut = new SortService(new BubbleSort<String>());
                class SortServiceTest {
                    private SortService sut = new SortService(new JavaSort<String>());
                    @Test
                    void test(){
                        // given
                        // when
                        List<String> actual = sut.doSort(Arrays.asList("3", "2", "1"));
                        // then
                        assertEquals(Arrays.asList("1", "2", "3"), actual);
                    }
                }