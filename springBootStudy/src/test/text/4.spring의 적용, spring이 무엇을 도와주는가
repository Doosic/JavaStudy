* Why Spring? 공식 홈페이지
    - 자바 프로그래밍을 더욱더 빠르게 쉽게 안전하게 할 수 있게 해준다
      프로그래머들에게 꽃길만 걷게 해주겠다.
      엔터프라이즈급 서비스를 개발할때 보편적으로 사용하는 모든 서비스를
      스프링이 지원하려고 노력해준다.

    - Spring 핵심 기능
        - 1. The IoC Container
        - 2. Resources
        - 3. Validation, Data Binding, and Type Conversion
        - 4. Spring Expression Language(SpEL)
        - 5. Aspect Oriented Programming with Spring
        - 6. Null-safety
        - 7. Logging
    중요한 몇가지의 핵심 기능만 설명한다.

        - IoC (Inversion of Control)
          "전통적인 제어 흐름에 비추어볼 때, 제어 흐름을 반대로 뒤집은 것"
          쉽게 표현한 설명: 할리우드의 배우가 오디션을 보고 결과를 알고싶은데
          오디션을 본 회사에서 "우리에게 전화하지마 결과는 우리가 알아서 알려줄께" 라고 답하는
          것과 비슷하다.

          위키피디아: https://ko.wikipedia.org/wiki/%EC%A0%9C%EC%96%B4_%EB%B0%98%EC%A0%84

        - 예제코드로 제어반전 이해하기
          1. ServerFacade 라는 클래스에는 Request 를 받아 Response 를 던져주는 메소드가 있다.
          public class ServerFacade{

            2. 매개변수로 pRequest 를 받는다.
            public Object respondToRequest(Object pRequest){
            3. validateRequest(pRequest) 를 통해 데이터 검증을 진행한다.
              if(businessLayer.validateRequest(pRequest)){
              4. 조건 만족시 DAO.getData(pRequest) 로 데이터를 받아와서
                DAO.getData(pRequest);
                5. 데이터를 바꿔서 되돌려준다.
                return Aspect.convertData(pRequest);
              }
              return null;
            }
          }
          위와같은 코드가 전통적인 제어의 흐름이다.
          ServerFacade 가 검증도하고 DAO 가 어떤것인지 알고있고
          데이터를 바꾸는것도 알고있다. 너무 많은것들이 강하게 결합되어있다.
          하나만 바뀌어도 영향을 받는다.

          간결해진 아래의 코드를 보자. 결합이 느슨해졌다.
          public class ServerFacade{

          1. DAO 를 입력인자로 받음으로써 사용자 측에서 마음대로 바꿔서 집어넣으면
             얼마든지 다른 동작을 할 수 있고, ServerFacade 입장에서는 그게
             어떤 구현이든 상관없이 getData() 라는 규약(Interface)만 지켜준다면,
             getData() 라는 기능만 지켜주면 ServerFacade 는 자기 역할을 할 수 있다.
             그 안에 어떠한 검증로직이 있던지 없던지 주는 방법이 어떻게 되던지 영향을 받지
             않는다.

             이렇게 된다면 ServerFacade 에 모두 결합되어있던 검증,DAO,데이터 변환 등...
             비즈니스 로직이 분리되어진다. 이렇게 하고자 제어의 흐름을 역전한 것이다.

            public Object respondToRequest(Object pRequest, DAO dao){
            2. 오직 DAO 를 인자값으로 받아 Response 로 돌려주는 역할만을 한다.
              return dao.getData(pRequest);
            }
          }

        - IoC 의 더 쉬운 간단한 예
          "라이브러리를 사용할 때는 내 코드가 라이브러리 코드를 호출하지만
           프레임워크를 사용할 때는 프레임워크가 내 코드를 호출합니다."

           아래의 코드를 보면 Assertions 은 Junit 에서 제공하는 라이브러리이고
           사용하기위해 직접 호출하고있다.
           그러나 HelloService 를 보면 HelloService.hello() 구현체를 가져오는 코드가 어디에도 없다.
           new 키워드가 보이지 않는다. 이 일은 @Autowired 라는 스프링프레임워크가 제공해주는 기능을 이용하여
           이 프로그램이 실행될때 프래임워크가 직접 HelloService 를 주입해준다.

           @SpringBootTest
           Class HelloServiceTest{

                // 프레임워크
                // 요즘은 @Autowired 보다는 생성자주입을 사용한다.
                @Autowired
                private HelloService helloService;

                @Test
                void test() {
                    String input = "Uno";

                    String result = helloService.hello(input);

                    // 라이브러리
                    Assertions.assertEquals("Hello Uno!", result);
                }
           }

        - 도메인이란?
          소프트웨어 공학에서 도메인 모델(domain model)은 행우와 데이터를 둘 다 아우르는 도메인의 개념 모델이다.

          쉽게 설명된 글을보자면, 데이터는 어떤형식으로 저장하는가?
          데이터 CRUD 는 어떻게 구상해야하나? 로 정리할 수 있다고한다.


        - Validation, DataBinding, Type Conversion
            1. 데이터의 검증
               @NotNull
               @Min(18)
               private Integer age;
               @NotNull, @Size 등... 이 지원이 없다면 특정 Entity 폼을 사용했을때에
               일일이 개발자가 데이터 하나하나 검증을 해야한다.
            2. 데이터를 인식하고 자료형에 할당
               @GetMapping("/api/employees/{id}")
               @ResponseBody
               public String getEmployeesById(@PathVariable String id) {
                    return "ID: " + id;
               }
               위의 코드를보면 우리는 보통 id 를 숫자로 사용한다. id 하면 Integer 가 맞을거라 생각하는데
               Spring 은 넣어준 값으로 알아서 바인딩을 해준다. String id 하면 String 으로 바인딩을
               해주고 Integer id 하면 Integer 로 바인딩을 해준다.

            3. 데이터 자료형의 변환
               final class StringToInteger implements Converter<String, Integer>{
                    public Integer converter(String source){
                        return Integer.valueOf(source);
                    }
               }
               컨버터라는 인터페이스를 직접 구현해주면 입력으로 받은 자료형을 다른 타입으로
               변환할 수 있다.


        - SpEL
            - 스프링 애플리케이션의 런타임에 다양한 데이터에 접근하기 위한 언어
            - JSP Unified EL 과 유사하지만 스프링에 특화되어 더 다양한 기능을 제공
            @Value("$value.from.file}")
            private String valueFromFile;
            그냥 쓰면 단순한 문자열이지만 value 를 사용시 저 위치의 문자열이 가지고 있는
            정보를 주입받는다.

        - Aspect Oriented Programming with Spring
            - AOP: 관점 지향 프로그래밍 - 공통 기능을 개발자의 코드 밖에서 필요한 시점에 적용 가능
            - AOP 를 적극적으로 사용하고 지원하는 프레임워크
            - Proxy, Aspect, Join Point, Advice, Pointcut, Weaving
            - CGLib, AspectJ
            - AOP 를 사용하지 않아도, 심지어 몰라도 여전히 프레임워크를 사용 가능

            @Transactional
            public boolean update(int score){
                return scoreService.updateScores(score);
            }
            비즈니스 로직 뿐인데, 트랜잭션을 보장하는 작업이 일어나고 있다.
            트랜잭션을 중간중간 시작, 롤백, 저장 등을 계속 저장한다면 힘들것이고
            save 여러개가 순서대로 일어나야하고 하나가 실패한다면 다 실패해야하는데
            일일이 체크하기 귀찮음 그런데 그런걸 다 자동으로 해준다.

            Proxy Bean 이 무엇인지 알아보기.

            스프링은 엔터프라이즈급 애플리케이션을 만드는데 필요한
            모든 기능을 거의다 지원해주는 프레임워크다 라고 정의할 수 있다.