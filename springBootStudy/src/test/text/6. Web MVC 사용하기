* web mvc 사용하기
    - implementation 'org.springframework:spring-webmvc:5.3.8'
      web 에는 web 과 webmvc 가 있는데 webmvc 를 불러와야한다.
        - webmvc 는 web 에 들어있는 의존성들을 모두 포함하기 때문이다.
        - implementation 'org.springframework:spring-context:5.3.8'
          를 지워도된다. 이 또한 webmvc 가 포함하고 있기 때문이다.

    - Tomcat 사용하기
        - compileOnly 'javax.servlet:javax.servlet-api:4.0.1'
          를 추가 Tomcat 을 사용하려면 필요하다.
        - https://tomcat.apache.org/download-90.cgi 로 이동하여 tomcat 을 받아주는데
          document 를 잘 읽어보고 javaServlet 과 맞는 버전을 다운받아 사용하면된다.

        - plugins {
              id 'java'
              id 'war'
          }
          build.gradle 플러그인에 배포할 파일을 적어준다(war, jar)
          이후 오른쪽 상단에 Gradle 을 누른다면 Tasks 폴더 밑에 clean 을 실행후
          build 를 실행해주면 build 파일이 생성된다.

          이후 Tomcat 을 등록했던 EditConfiguration 에 들어가서 Deployment 에 war 파일을 등록해준다.

        - spring.io 홈페이지로 이동 document 를 참조한다.(https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#spring-web)
            - 1.1. DispatcherServlet
              web 이라는 디렉토리를 하나 만들어주고 그 밑에 document 에 실려있는
              dispatcherServlet 을 만드는 코드를 갖다 붙여준다. DispatcherServlet 을 자동으로 등록하고
              초기화 하는 코드이다.

              The following example of the Java configuration registers and initializes the DispatcherServlet, which is auto-detected by the Servlet container
              Servlet 컨테이너에 의해 자동 감지되는 DispatcherServlet 을 등록하고 초기화합니다.

              붙여온 코드를 살펴보면 onStartup 메소드 안에
              AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();
              Main.class 에서 만든 ApplicationContext 가 있다.(중복됨)

              context.register(Config.class); 의 설정파일에 의해서 DispatcherServlet 을 초기화 해주고 등록해주는데
              Servlet Container 에서 자동으로 발견하여 인식해준다. Main 을 지워도된다.

        - Tomcat 서버를 시작해준다. 웹페이지가 나오고 내가 설정한 포트인 8080 포트가 올라왔다면
          제대로 올라온 것이다.


        - controller 패키지를 만들어주고 MainController 를 만들어준다.(이름은 그냥 의미있게 지어주면됨)
          @RestController 를 사용해준다. = @Controller + @ResponseBody
          @Controller = Api 의 응답을 View 리졸버가 View 로 뿌려준다.
          그러나 Response 에 데이터를 있는 그대로 담아서 보내주고싶기에 @ResponseBody 를 사용한다.
          그 둘을 동시에 포함하고있는 어노테이션 @RestController 을 사용한다

        - 저번에 만들었던 SortService 를 사용해보자.
          생성자를 통한 주입방법을 사용한다. @RequestParam 에 의해 값을 넘겨받는다.
                - @RequestParam 이란?
                  HTTP Request 파라미터를 받을 수 있는 어노테이션 이다.
                  파라미터와 변수명을 일치 시킨다면 자동으로 값이 1:1 매핑된다.
                  그러나 기본값으로 RequestParam 은 반드시 값이 존재해야 하도록 설정 되어 있다.
                  required 설정으로 필수 값 제외 가능

          - http://localhost:8080/?list=3,4,5,1,2
            위와같은 주소로 리스트형식을 파라미터로 넘겨 sort 기능을 이용해본다.
            이때에 String 으로 값을 받았기 때문에 정렬시에 1, 10, 2, 5, 3 을 보낸다면
            [1,10,2,3,5] 순으로 나온다. Integer 숫자형 타입이 아닌 String 타입이라 문자열의
            크기를 비교하기 때문이다. 주의하자 테스트코드도 작성해서 확인하고

          private final SortService sortService;

              public MainController(SortService sortService) {
                  this.sortService = sortService;
              }

              @GetMapping("/")
              public String hello(@RequestParam List<String> list){
                  return sortService.doSort(list).toString();
              }
