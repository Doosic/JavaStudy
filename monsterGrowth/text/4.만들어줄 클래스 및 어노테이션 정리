*H2DB 와 Http 파일을 사용하여 몬스터 생성하기!
- 만들어줄 클래스
    - MMakerController (패키지: controller)
    - MMakerService (패키지: service)
    - Monster (패키지: entity)
    - JpaConfig (패키지: config)
    - MonsterRepository (패키지: repository)
    - MonsterLevel (패키지: type) 진화 레벨 정의
    - MonsterType (패키지: type) 몬스터의 특성 정의
    - StatusCode (패키지: code) 몬스터의 건강 상태
    - MMonsterErrorCode (패키지: exception) 공통 애러코드 정의
    - MMakerConstant (패키지: constant) Enum 과 비슷한 상수를 정의해두는 클래스

1. MMakerController (사용 어노테이션들)

* @RestController 를 사용한다.
  RestController 는 Controller 와 ResponseBody 가 추가된 것 이다.
  RestController 의 주용도는 Json 형태로 객체 데이터를 반환하는 것이다.


* @RequiredArgsConstructor 를 사용한다.
  참조 : https://madplay.github.io/post/why-constructor-injection-is-better-than-field-injection
    - 왜 사용하는가?
    의존성을 주입할때에 @Autowired 대신 생성자 주입을 활용하는것이 좋다고한다.
    @Autowired 를 활용한 의존성 주입을 필드 주입이라고 한다. 필드 주입은 사용법이 매우
    간단해서 대부분 의존성 주입을 필드 주입으로 접하지만, 편리하단 것 말고는 장점이 없어서
    스프링 4.3 부터는 사용하지 않는 것을 권장한다고 합니다.

    - 그럼 무엇을 사용해야할까?
    스프링 팀에서는 생성자 주입을 사용하는 것을 권장하고 있다고 한다.
    생성자 주입의 장점
        - 1. 순환 참조 방지
          2. 테스트 코드 작성 용이
          3. 코드 악취 제거
          4. 객체 변이 방지 (final 가능)

    - 기존 생성자 주입 코드 (@RequiredArgsConstructor 사용시 생성자 주입코드 직접 작성하지 않아도된다)
@RestController
public class MMonsterController{
    private final MMonsterGrowth mMonsterGrowth;

    public MMonsterController(MMonsterGrowth mMonsterGrowth){
        this.mMonsterGrowth = mMonsterGrowth;
    }
}


* @Slf4j 를 사용한다.
  로그를 남기기 위한 어노테이션이다.
  Log4j 를 개발한 Ceki Gulcu 가 Log4j 의 단점 개선 및 기능을 추가하여 개발한 로깅
  라이브러리 라고한다.

2. MMakerService (사용 어노테이션들)

* @Service 를 사용한다.
  Service 레이어(계층) 클래스들에 사용되는 어노테이션이다. @Component 어노테이션을 써도 상관없다
  다만 @Service 어노테이션을 사용함으로써 해당 클래스가 서비스 레이어 클래스라는 것을 명확히 한다.

* @RequiredArgsConstructor (Controller 참조)
* @Slf4j (Controller 참조)


3. Monster (사용 어노테이션들)
* @Entity
  엔티티 어노테이션을 클래스에 선언하면 그 클래스는 JPA 가 관리한다.
    @Entity 가 붙은 클래스에는 다음 제약사항이 필요하다.
    - 1.필드에 final, enum, interface, class 를 사용할 수 없다.
      2.생성자중 기본 생성자가 반드시 필요하다.

* @Id
  @Id는 해당 프로퍼티가 테이블의 주키(primary key) 역할을 한다는 것을 나타낸다.

* @GeneratedValue(strategy = GenerationType.IDENTITY)
  @GeneratedValue는 주키의 값을 위한 자동 생성 전략을 명시하는데 사용한다.
    - IDENTITY: DB의 identity 컬럼을 이용
      기본 키 생성을 데이터베이스에 위임하는 방법 (데이터베이스에 의존적) - 주로 MySQL, PostgresSQL, SQL Server, DB2에서 사용합니다.


* @AllArgsConstructor
  클래스에 존재하는 모든 필드에 대한 생성자를 자동으로 생성해준다.
  필드에 @NotNull Annotation 이 마크되어 있다면 생성자 내에서 null-check 로직을 자동적으로 생성


* @NoArgsConstructor
  파라미터가 없는 생성자를 생성해준다. (디폴트 생성자)
  @Entity 가 붙은 클래스의 제약사항중 하나인 생성자중 기본생성자가 반드시 필요하다를 지켜준다.

  주의점
    1. 필드들이 final 로 생성되어있는 경우에는 필드를 초기화 할 수 없음. 그렇기에 생성자를 만들지 못하고 에러발생
    해결법 : #@NoArgsConstructor(force = true) 옵션을 이용하여 final 필드를 0, false, null 등
    으로 초기화를 강제로 시켜 생성자 생성가능
    2. @NotNull 같이 필드에 제약조건이 설정되어 있는 경우, 생성자내 null-check로직이 생성되지 않는다.



* @EntityListeners(AuditingEntityListener.class) (해당 클래스에 Auditing 기능을 포함)
  참조 : https://velog.io/@seongwon97/Spring-Boot-Entity-Listener
  EntityListeners 는 엔티티의 변화를 감지하고 테이블의 데이터를 조작하는 일을 한다.
  이전에는 Column 값이 수정되는 것에 대해서 반복된 코드를 추가해야 했으며 개발자가 직접
  추가를 하다보니 실수가 발생하는 경우가 종종 발생하였다. 하지만 이러한 것은 EntityListener
  를 사용하면 쉽게 개선할 수 있다.

    - JPA 에서는 아래의 7가지 Event 를 제공한다.
      @PrePersist : Persist(insert)메서드가 호출되기 전에 실행되는 메서드
      @PreUpdate : merge 메서드가 호출되기 전에 실행되는 메서드
      @PreRemove : Delete 메서드가 호출되기 전에 실행되는 메서드
      @PostPersist : Persist(insert)메서드가 호출된 이후에 실행되는 메서드
      @PostUpdate : merge 메서드가 호출된 후에 실행되는 메서드
      @PostRemove : Delete 메서드가 호출된 후에 실행되는 메서드
      @PostLoad : Select 조회가 일어난 직후에 실행되는 메서드

    DB값 업데이트
    예시)
        DB를 설계하다보면 보통 Created time 과 Updated time Column 을 만들어 저장한다.
        하지만 데이터를 생성할 때마다 user.setCreateAt(LocalDateTime.new()); 와 같이
        직접 넣어주다보면 번거롭기도 하고 잊어버리는 일도 발생할 것이다. 그래서 대부분 prePersist 를
        사용하여 자동으로 Created time 과 Updated time 값을 넣어준다.

        @PrePersist
        public void prePersist(){
            this.createdAt = LocalDateTime.now();
            this.updatedAt = LocalDateTime.now();
        }

    AuditingEntityListener.class
    그런데 보자하니 생성일자, 수정일자, 식별자 같은 필드 및 컬럼은 모든 Entity 테이블에 적용될 것이고
    도메인마다 공통적으로 존재한다는 것은 결국 코드가 중복된다는 말이고 비효율 적임을 나타낸다.
    그래서 이러한 것들을 자동으로 저장해주는, 자동으로 도메인을 영속성 컨텍스트에 저장하거나 조회를 수행한 후에 update 를
    하는 경우 매번 시간 데이터를 자동으로 매핑하여 데이터베이스의 테이블에 넣어주는 기능이 나왔고 그것을 Auditing(감시하다)
    기능 이라고 한다. Spring Data JPA 에서 시간에 대해서 자동으로 값을 넣어주는 기능이다.

            - @MappedSuperclass
                JPA Entity 클래스들이 해당 추상 클래스를 상속할 경우 createDate, modifiedDate 를 컬럼으로 인식
            - @EntityListeners(AuditingEntityListener.class)
                해당 클래스에 Auditing 기능을 포함
            - @CreatedDate
                Entity 가 생성되어 저장될 대 시간이 자동 저장
            - @LastModifiedDate
                조회한 Entity 의 값을 변경할 때 시간이 자동 저장

    사용 방법
    1. Application 파일 @SpringBootApplication 이 붙은 곳에 @EnableJpaAuditing 을
       붙여준다. 그러나 이 방법은 추천하지 않는 방법이라고 한다. JPA 에 관련된 Config, 보안에 관련된 Config 등...
       Config 들을 따로 각각 분리시키는 이유는 단위테스트에서 필요한 Context 만 불러오기 위함이다.
       그런데 @SpringBootApplication 에 @EnableJpaAuditing 을 붙이는 순간 모든 테스트에서 @EnableJpaAuditing 가
       호출됨으로 좋지 않다고 한다.

    2.JpaConfig(설정파일)를 만들어준다. (아래의 목차 4.JpaConfig 참조)


* @Builder
  빌더 패턴을 사용할수 있게 해주는 어노테이션이다. 빌더 패턴이란 복합 객체의 생성 과정과 표현 방법을 분리하여
  동일한 생성 절차에서 서로 다른 표현 결과를 만들 수 있게 하는 패턴이다.
  생성자 인자로 너무 많은 인자가 넘겨지는 경우 어떠한 인자가 어떠한 값을 나타내는지 확인하기가 힘들다
  또 어떠한 인스턴스의 경우에는 특정 인자만으로 생성해야 하는 경우가 발생한다.
  특정 인자에 값을 null 로 전달해줘야 하는데, 이는 코드의 가독성 측면에서 매우 좋지 않다는 것을 알수 있다.

    - 장점
        1. 인자가 많은 경우 쉽고 안전하게 객체를 생성할 수 있다.
        2. 인자의 순서와 상관없이 객체를 생성할 수 있다.
        3. 적절한 책임을 이름에 부여하여 가독성을 높일 수 있다.

    - 주의할점
        1. 빌더 패턴을 사용하면 객체를 만들기에 앞서 빌더부터 만들어야한다.
           빌더 생성 비용이 크지는 않지만 성능에 민감한 상황에서는 문제가 될 수 있다.
        2. 점층적 생성자 패턴보다는 코드가 장황해서 매개변수가 4개 이상은 되야 값어치를 한다.
           하지만 API 는 시간이 지날수록 매개변수가 많아지는 경향이 있음을 생각하자


4. JpaConfig (사용 어노테이션들)
    @Configuration 를 붙여준다.
    @Configuration 는 설정파일을 만들기 위한 어노테이션 or Bean 을 등록하기 위한 어노테이션이다.
    @Configuration 사용시 Bean 을 등록할때 싱글톤이 되도록 보장해주고, 스프링 컨테이너에서 Bean 을 관리할 수 있게 된다.

    @EnableJpaAuditing 을 붙여준다.
    Spring Data Jpa 에서 제공하는 Auditing 기능을 사용할 수 있다.
    @EnableJpaAuditing 어노테이션을 Application 에 직접 달면 단위 테스트시 문제가 발생한다.
    (이유는 잘 모르겠음 알아볼 필요가 있다) 그래서 별도 Config 클래스를 생성해 어노테이션을 추가해주는것이다.


5. MonsterRepository (사용 어노테이션 및 상속)
읽어봐야 할것 아직은 이해가 안됨 : https://www.inflearn.com/questions/110045
                            : https://jinseobbae.github.io/jpa/2021/12/06/jpa-repository-not-managed-type-error
* @Repository (레포지토리 어노테이션 생략가능! 왤까?)
    - @Repository 를 생략해도 되는 이유
      1.컴포넌트 스캔을 JpaRepository 인터페이스를 상속받은것만 보고도
        Spring Data Jpa 가 자동으로 처리한다.
      2.JPA 예외를 스프링 예외롤 변환하는 과정도 자동으로 처리

* JpaRepository (나중에 좀 더 자세히 공부가 필요하다....)
    1. 개발자가 구현체(구현 코드 save, findById 등...)를 구현하지 않아도 사용할 수 있다.
       - JpaRepository 에는 인터페이스만 있는데 어떻게 사용될 수 있는것일까?
         Spring Data Jpa 가 인터페이스만 보고 구현체를 만들어서 Injection 을 해준다.

    2. JpaRepository<타입, pk> interface 를 상속받아 사용한다.

    3. JpaRepository 인터페이스와 중간 단계들에 있는 @NoRepositoryBean 어노테이션은 뭘까?
        중간에 들어가는 Repository 는 반드시 @NoRepositoryBean 을 등록해줘야 하는 이유가 뭘까...?
        해답)
            사용자가 Repository 인터페이스들을 상속받아서 사용할 수 있도록 Spring Data Jpa 의 각 인터페이스들은 공통적으로
            @NoRepositoryBean 어노테이션이 선언되어있다. 이 어노테이션의 목적은 사용자가 정의한 Repository 와 골격이 되는
            Spring Data Repository 인터페이스들을 구분해서 사용자가 만든 Repository 들만 스프링이 인식하는 빈이 되도록
            하는 것이다.
        요약)
            1. JpaRepository 와 중간단계의 Repository 들은 사용자가 만들 Repository 에 기능만을 상속해 주는것
            2. 기능을 상속할 Repository 들이 Bean 으로 등록될 이유가 없다. 기능만 상속해 주면 되기 때문이다.
            3. 그렇기에 중간단계의 Repository 들을 빈으로 인식하지 못하게 하고, 사용자가 만든 Repository 들만 빈으로 인식하게 한다.


6. MonsterLevel (사용 어노테이션)
@AllArgsConstructor (Controller 참고)
@Getter (getter : 어떤 오브젝트 혹은 변수의 값을 가져오는 역할, getter 을 자동으로 생성해준다.)

7. MonsterType
@AllArgsConstructor (Controller 참고)
@Getter (getter : 어떤 오브젝트 혹은 변수의 값을 가져오는 역할, getter 을 자동으로 생성해준다.)
