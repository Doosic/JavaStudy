! Enum 클래스 Converter 로 재편성 해보기 : https://velog.io/@youmakemesmile/JPA-Enum-Type-%EC%A0%81%EC%9A%A9%EA%B8%B0

* 예외처리는 Controller 와 service 둘다 처리해준다.
참고 자료 : https://jeong-pro.tistory.com/195
    - Controller
      Controller 가 1개~3개 일때에는 각 컨트롤러마다 예외처리를 해줄 수 있다.
      그러나 그 갯수가 많아지기 시작한다면 보일러플레이트 코드가되어 비효율 적이다.
      그렇기에 컨트롤러에서 직접 처리하는 것이 아닌 글로벌 ExceptionHandler 클래스를 만들어
      그곳에서 다 처리해주는 방법을 사용한다.

    - 유용한 사용법
      1. Login Controller 마다 발생시키는 예외가 다를수 있는데 login 모듈에 있는건 더욱더 다를 수 있다.
         필요시 전역의 예외를 잡긴하되 패키지 단위로 제한할 수도 있다. @RestControllerAdvice("com.example.demo.login.controller")
      2. 공통적으로 사용하는 http 상태코드를 함께 리턴해준다.(@ResponseStatus(value = HttpStatus.UNAUTHORIZED))
      3. 에러인터페이스, 포맷 상태가 다 같고 클라이언트 측에서 좋은 이해를 할 수 있게 만들어야 한다
            - NO_MONSTER(3000, "is_not_Monster")
            - DUPLICATE_SSN(3001, "duplicated_Monster_ssn")

      1. Error 를 반환해주는 ErrorResponse 클래스를 만들어준다.
      2. ExceptionHandler 클래스를 만들어준다.
      3. @RestControllerAdvice 어노테이션을 달아준다.
            - 각 컨트롤러에게 조언을 해주는, 컨트롤러에 어드바이스 역할을 해주는 컨트롤러를 Bean 으로 등록
              @ExceptionHandler(DMakerException.class) 다음과같은 방식으로 사용한다면 RestController 에서
              MMakerException 이 발생한다면 @ExceptionHandler(DMakerException.class) 가 적용된 클래스가
              호출된다.

              주의사항 / 알아 둘 것
              - Controller, RestController 에만 적용이 가능하다(@Service 같은 빈에서는 안된다)
              - 리턴 타입은 자유롭게 해도 된다.(Controller 내부에 있는 메서드들은 여러 타입의 response 를 할 것이다.
                해당 타입과 전혀 다른 리턴타입이어도 상관없다.
              - @ExceptionHandler 를 등록한 Controller 에만 적용된다. 다른 Controller 에서 MMakerException 이
                발생하더라도 예외를 처리할 수 없다.
              - 메서드 파라미터로 자유롭게 받아와도 된다.
      4. 다음과 같이 @ExceptionHandler 에 내가 처리하고싶은 Exception 을 정의해준다.
            - @ExceptionHandler(MMakerException.class)
              => MMakerException 에러 발생시 호출

            - @ExceptionHandler(value = {HttpRequestMethodNotSupportedException.class,
                          MethodArgumentNotValidException.class })
              => HttpRequestMethodNotSupportedException.class = Post 메서드를 사용해야 할 곳에 Post 메서드가 아닌 다른 메서드를 사용했을때
              => MethodArgumentNotValidException.class = 자바 Bean 벨리데이션을 할 때에 @NotNull,@Min 등...
                 컨트롤러 내부에 진입하기전에 문제되는 것들을 잡아준다.

            - @ExceptionHandler(Exception.class)
              => 진짜 어떤 오류가 날라올지 알 수 없는 경우





      - Service
        공통적인 validation, 특정 메서드에 대한 Error 를 처리해준다.

            - 공통적인 validation
              ADULT("어른 몬스터", age ->
                        age > MAX_TEENAGER_AGE && age < MAX_ADULT_AGE)

              private final Function<Integer, Boolean> validateFunction;

                  public void ValidateAge(Integer age){
                      if(!validateFunction.apply(age))
                          throw new MMakerException(LEVEL_EXPERIENCE_AGE_NOT_MATCHED);
                  }
              위와 같이 Enum 을 사용하여 ADULT 를 정의하고 Function 을 이용하여 validation 체크를 한 후
              조건 실패시 throw new 로 에러를 던져준다

              request.getMonsterLevel().ValidateAge(
                                      request.getAge());
              서비스 단에서 Enum 에 정의한 에러 처리 Function 을 공통적으로 사용하여준다.

            - 개별적인 처리
              createMonster 같은 경우 중복되는 Monster 가 있는지 체크해야한다.
              editMonster 같은 경우 수정할 Monster 가 있는지 먼저 체크해야한다.
