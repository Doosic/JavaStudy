*패키지 구조
패키지 구조는 mvc 패턴을 사용하는 만큼 일정한 패턴은 있으나
상세하게는 프로젝트를 만들어가는 그룹마다 패키지명이 다르고 나뉘는 구조가 조금씩
더 세분화되거나 간단화 되어있기도 하다.

요번 강의에서 들은 내용들을 정리로 토대로한 프로젝트 구조이다.

-main
    - com.fc_study.monsterGrowth
        - code
        - config
        - dto
        - entity
        - exception
        - repository
        - service
        - type (모든 클래스에서 공통적으로 사용할 것만 넣을예정, 특정 Entity 클래스와 관련있는것은 Entity 클래스 내부에 enum 작성)
-test
    - java
        - controller
        - dto
        - service

*패키지 별 역할
    -dto
    DTO(Data Transfer Object)란 계층간 데이터 교환을 위해 사용하는 객체(Java Bean)이다.
    클라이언트 요청에 포함된 데이터를 담아 서버 측에 전달하고, 서버 측의 응답 데이터를 담아 클라이언트에 전달하는
    계층간 전달자 역할이다. 로직을 갖고 있지 않은 순수한 데이터 객체이다.

    * 잠깐! Entity 와 Dto 를 분리하는 이유에 대해서 간단히 알아보자
    1. DB 와 view 사이의 역할을 철저히 분리하기 위해서이다.
       Entity 클래스는 실제 테이블과 매핑되어 만일 변경되게 된다면 다른 클래스에 영향을 끼치고,
       Dto 클래스는 view 와 통신하며 자주 변경되므로 분리 해주어야 한다.(Entity 클래스 보호)
    2. dto 를 사용하지 않고 Entity 에 있는 데이터를 그대로 view 에 넘겨주게 된다면
       불필요한 데이터 또는 넘기지 말아야 할 데이터를 넘길수 있기 때문에 dto 를 사용하여 응답할 데이터를 선택적으로 정의해준다.
       (Entity 의 변수명을 db의 컬럼명과 일치시키고 dto 의 변수명을 카멜케이스로 정의하여 사용하는 경우도 있다.)

    예)
        Entity
            private String user_id;
            private String user_name;
            private String user_password;

        dto
            Response{
                private String userId;
                private String userName;
            }

        Entity 의 변수명을 db의 컬럼명과 일치시키고 dto 의 변수명을 카멜케이스로 사용 할 수 있다.
        dto.Request.builder()
                .userId(entity.getUser_id())
                .userName(entity.getUser_name())
                .build();

    - controller 패키지
    Controller 는 model 과 view 를 이어주는 중계자 역할을 한다.
    (이곳에서의 모델이란 service, dto, repository 를 말한다)
    view 에서 클라이언트의 요청을 받고 service 에 처리를 요청하여
    응답값을 다시 view 로 던져주는 역할을 한다고 생각하면 된다.

    - service 패키지
    Controller 로 부터 요청을 받은 Service 는 비즈니스 로직을 실행하고
    dto 에 데이터를 담아 컨트롤러로 전달하여준다.

    - config 패키지
    JpaConfig 로 설정을 따로 하기위해 사용한다.

    - exception 패키지
    에러 메세지를 정확히 처리하기 위해 에러코드를 정의해주고, 어떤 에러를
    뱉어낼지를 에러를 핸들링 해줄 것들이 들어갈 패키지 이다.

    - type 패키지
        - (원래는 Enum 을 이곳에서 사용했으나 enum 들을 클래스와 관련있는 Entity 로 옮겨 직접적으로 관계가 있음을 코드상으로 표현해주었다.)
        - (모든 클래스에서 공통적으로 사용할 것만 넣을예정, 특정 Entity 클래스와 관련있는것은 Entity 클래스 내부에 enum 작성)
    Enum 클래스들을 모아둘 공간이다. Enum 은 관련이 있는 상수들의 집합이다.
    자바에서는 final 로 String 과 같은 문자열이나 숫자들을 나타내는 기본 자료형의 값을
    고정할 수 있는데 이를 상수(변하지 않는 값)라고한다.

   - entity 패키지
    1. 실제 DataBase 의 테이블과 1:1 로 매핑되는 클래스를 모아두는 패키지이다.
       db 의 테이블내에 존재하는 컬럼만을 속성으로 가져야하며, Entity 클래스는 상속을 받거나 구현체여서는 안되며
       테이블내에 존재하지 않는 컬럼을 가져서도 안됩니다.
    2. JPA 를 사용한다면 @Entity 어노테이션을 붙여 이 클래스를 테이블과 매핑한다고 JPA 에게 알려준다.

    - repository (저장소) 패키지
    Entity 에 의해 생성된 db에 접근하는 메서드 findAll()... 들을 사용하기 위한 인터페이스 이다.
    Entity 를 db의 테이블과 1 : 1 로 매핑시켰다면 그것으로 무언가를 해야 쓸모가 있을것이다.
    어떤값을 넣거나, 값을 조회하는 등의 CRUD 를 어떻게 할 것인지 정의해주는 계층이라고 생각할 수 있다.
    JpaRepository 를 상속받음으로써 기본적인 동작이 모두 가능해진다.
    예)
    public interface DeveloperRepository
            extends JpaRepository <Developer, Long>

    JpaRepository 는 어떤 Entity 를 메서드의 대상으로 할지를 위와같은 키워드로 지정한다
    JpaRepository <대상으로 지정할 엔티티, 해당 엔티티의 PK의 타입>

    - dao (repository 와 dao 의 역할이 궁금해서 적어두었다. 이번 프로젝트에서는 사용하지 않는다.) 패키지
    Data Access Object 의 약자로, 데이터베이스의 데이터에 접근하기 위해 생성하는 객체이다.
    즉, db 서버에 접근하여 sql 문을 실행할 수 있는 객체이다. db에 접속하여 데이터의 CRUD 작업을 시행하는 클래스이다.
    단순하게 페이지를 불러오고 DB 정보를 한번에 불러오는 간단한 프로젝트의 경우 Service 와 DAO 는 차이가 거의 없을 수 있다고 한다.
    (db에 접근하기 위한 로직 & 비즈니스 로직을 분리하기 위해 사용한다)

    - repository, dao 의 역할을 간단히 정리해보기
    Client -> DTO -> Controller -> DTO -> Service -> DTO -> dao -> Entity -> DB
    Client -> DTO -> Controller -> DTO -> Service -> DTO -> Repository(jpa) -> Entity -> DB
    아주 간단히 정리하면 dao 란 db를 사용해 데이터를 조회하거나 조작하는 기능을 전담하도록 만든 인터페이스 이며,
    Repository 는 JpaRepository 사용하여 데이터를 조회하거나 조작하는 기능을 전담하는 인터페이스 이다.

    * 김영한 님의 Service 와 repository 의 차이 설명
    repository 패키지는 DB에 접근하는 모든 코드가 모여있다고 생각하시면 됩니다.
    service 패키지는 DB에 접근하는 코드는 repository 에 위임하고, 비즈니스 로직과 관련된 모든 코드가 모여있습니다.
    이렇게 구분해두면 비즈니스 로직과 관련된 부분에 문제가 발생했을 때는 service 패키지를 확인하고,
    DB 접근과 관련된 문제가 발생하면 repository 부분을 확인하면 되겠지요^^?