* Mockito
    - Mock: 진짜 객체와 비슷하게 동작하지만 프로그래머가 직접 그 객체의 행동을 관리하는 객체.
    - Mockito: Mock 객체를 쉽게 만들고 관리하고 검증할 수 있는 방법을 제공한다.

    - 간단한 설명
      애플리케이션이 데이터베이스를 사용한다던가 API 를 사용하여 호출할때에
      외부 API 가 어떻게 동작할지, 항상 사용하면서 테스트할 수 없기때문에
      어떻게 동작할지 예측하여 Mock 으로 만들어서 Database, Api 에 요청할 수 있는 객체
      Dao 또는 Dto 들을 Mock 으로 만들어 테스트 하는것.

    - UnitTest (단위테스트)
      클래스나 오브젝트 단위로 생각하는것이 아닌 어떠한 행동의 단위로
      보는것, 또한 클래스나 오브젝트 단위로도 볼 수 있다. (팀 내에서 정한대로 가는것이 좋다)

    - Mock 이 무엇인지 좀 더 쉽게 알아보자
      실제 코드에서 JpaRepository 를 상속받은 monsterRepository 를 사용한다.
      이때에 Mock 을 사용할 수 없다면 아주 많은 임의의 객체를 직접 만들어야 한다.
      save(), findAll 등....

    - 메소드로 Mockito.mock() 만들기
      MMonsterService monsterService = mock(MonsterService.class);

    - Mock 어노테이션으로 만들기
      @Mock
      MMonsterService monsterService;

      그런데 이때에 그냥 @Mock 만 만들게 된다면 에러가 난다. 아무 값도 없기 때문이다.
      그래서 그것을 처리해줄 어노테이션을 넣어야 한다.(@ExtendWith(MockitoExtension.class))
      @ExtendWith(MockitoExtension.class) : 테스트 시작전 어노테이션을 감지해서 mock 객체를 주입해주는 역할을 한다고 한다.

    - Mock 객체를 여러 테스트에 거치지 않고
      메서드에서만 사용할거라 매개변수 어노테이션으로 사용하고 싶다면?
      @Test
      void createMonster(@Mock MMonsterService monsterService)

- @MockBean, @Mock
    - @MockBean 은 스프링 컨텍스트에 Mock 객체를 등록한다. 스프링 컨텍스트에 의해
      @Autowired 가 동작할 때 등록된 mock 객체를 사용할 수 있도록 동작한다.

      차이점)
            - @Mock 은 @InjectMocks 에 대해서만 해당 클래스안에서 정의된 객체를 찾아
              의존성을 해결합니다.
                - @InjectMocks : 해당 클래스가 필요한 의존성과 맞는 Mock 객체들을 감지하여 해당 클래스의
                                 객체가 만들어질때 사용하여 객체를 만들고 해당 변수에 객체를 주입하게 됩니다.

            - @MockBean 은 mock 객체를 스프링 컨텍스트에 등록하는 것이기 때문에 @SpringBootTest 를 통해서
              Autowired 에 의존성이 주입되게 됩니다.
